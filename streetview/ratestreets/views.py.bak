import logging
import csv
from django.shortcuts import render_to_response
from django.shortcuts import redirect
from django.shortcuts import get_object_or_404
from django.core.urlresolvers import reverse
from ratestreets.models import *
from ratestreets.forms import *
from django.template import RequestContext
from django.contrib.auth.decorators import login_required
from datetime import datetime
from django.http import HttpResponse
from django.db import connection
from django.db.models import Q

# Create your views here.
@login_required
def mainmenu(request):
    if (request.user.is_superuser):
        return redirect('ratestreets.views.viewadmintasks')
    else:
        return redirect('ratestreets.views.viewtasks')

@login_required
def viewtasks(request):
    tasks = RatingTask.objects.filter(user=request.user)
    return render_to_response('ratestreets/viewtasks.html', {'tasks': tasks}, context_instance=RequestContext(request))

@login_required
def viewadmintasks(request):
    if (not request.user.is_superuser):
        return redirect('ratestreets.views.viewtasks')
    tasks = [
             {'url':reverse('ratestreets.views.createstudy'), 'taskname':'Create a Study'},
             {'url':reverse('ratestreets.views.viewstudies'), 'taskname':'Manage My Studies'},
#             {'url':reverse('ratestreets.views.importsegments'), 'taskname':'Import Street Segments for a Study'},
             {'url':reverse('ratestreets.views.viewusers'), 'taskname':'Manage My Users'},
             {'url':reverse('ratestreets.views.viewmodules'), 'taskname':'Manage Modules'},
             {'url':reverse('ratestreets.views.viewtasks'), 'taskname':'Rate Streets'},
             ]
    return render_to_response('ratestreets/viewadmintasks.html', {'tasks': tasks}, context_instance=RequestContext(request))

@login_required
def createrater(request):
    if (not request.user.is_superuser):
        return redirect('ratestreets.views.viewtasks')
    if (request.method =='POST'):
        form = RaterForm(request, request.POST)
        if (form.is_valid()):
            form.save()
            # todo$ redirect to show page?  Or create study page?
            return redirect('ratestreets.views.viewrater ')
    else:
        form = RaterForm(request)
    return render_to_response('ratestreets/new_form.html', {'form': form, 'item_type':'User'}, context_instance=RequestContext(request))

@login_required
def viewusers(request, study_id=None):
    if (not request.user.is_superuser):
        return redirect('ratestreets.views.viewtasks')
    studies = []
    if (study_id != None):
        study = get_object_or_404(Study, pk=study_id)
        studies.append(study)
    else:
        studies = Study.objects.filter(managers=request.user)
        logging.debug('Found %d studies from query' % studies.count())
    users = User.objects.filter(Q(rated_studies_set__in=studies) |
                                Q(managed_studies_set__in=studies) |
                                Q(directed_studies_set__in=studies)).distinct()
    return render_to_response('ratestreets/view_users.html', {'users': users}, context_instance=RequestContext(request))

@login_required
def edituser(request, user_id):
    if (not request.user.is_superuser):
        return redirect('ratestreets.views.viewtasks')
    user = get_object_or_404(User, pk=user_id)
    if (request.method =='POST'):
        form = UserForm(request, request.POST, instance=user)
        if (form.is_valid()):
            form.save()
            # todo$ redirect to show page?  Or create study page?
            return redirect('ratestreets.views.viewadmintasks')
    else:
        form = UserForm(request, instance=user)
    return render_to_response('ratestreets/edit_form.html', {'form': form, 'item_type':'User'}, context_instance=RequestContext(request))

@login_required
def createstudy(request):
    if (not request.user.is_superuser):
        return redirect('ratestreets.views.viewtasks')
    if (request.method =='POST'):
        form = StudyForm(request, request.POST)
        if (form.is_valid()):
            form.save()
            # todo$ redirect to show page?  Or create study page?
            return redirect('ratestreets.views.viewadmintasks')
    else:
        form = StudyForm(request)
    return render_to_response('ratestreets/new_form.html', {'form': form, 'item_type':'Study'}, context_instance=RequestContext(request))

@login_required
def viewstudies(request):
    if (not request.user.is_superuser):
        return redirect('ratestreets.views.viewtasks')
    studies = Study.objects.filter(managers=request.user)
    return render_to_response('ratestreets/viewstudies.html', {'studies': studies}, context_instance=RequestContext(request))

@login_required
def editstudy(request, study_id):
    if (not request.user.is_superuser):
        return redirect('ratestreets.views.viewtasks')
    study = get_object_or_404(Study, pk=study_id)
    if (request.method =='POST'):
        form = StudyForm(request, request.POST, instance=study)
        if (form.is_valid()):
            form.save()
            # Saving the form may not save the model (e.g. if only many-to-many
            # fields like raters have been updated) so ensure the tasks exist here. 
            study.ensure_all_tasks_exist()
            # todo$ redirect to show page?  Or create study page?
            return redirect('ratestreets.views.viewadmintasks')
    else:
        form = StudyForm(request, instance=study)
    return render_to_response('ratestreets/edit_form.html', {'form': form, 'item_type':'Study'}, context_instance=RequestContext(request))

@login_required
def listsegments(request, study_id=None):
    if (not request.user.is_superuser):
        return redirect('ratestreets.views.viewtasks')
    study = get_object_or_404(Study, pk=study_id)
    segments = Segment.objects.filter(study=study)
    return render_to_response('ratestreets/list_segments.html', {'segments': segments}, context_instance=RequestContext(request))

@login_required
def importsegments(request, study_id=None):
    if (not request.user.is_superuser):
        return redirect('ratestreets.views.viewtasks')
    if (request.method =='POST'):
        form = SegmentImportForm(request, request.POST, request.FILES)
        if (form.is_valid()):
            study = form.cleaned_data['study']
            study.add_segments_from_csv(request.FILES['segment_csv'])
            return redirect('ratestreets.views.viewstudies')
    else:
        form = SegmentImportForm(request)
        if (study_id != None):
            form.initial['study']=study_id
    return render_to_response('ratestreets/import_segments.html', {'form': form}, context_instance=RequestContext(request))

@login_required
def viewmodules(request):
    if (not request.user.is_superuser):
        return redirect('ratestreets.views.viewtasks')
    modules = Module.objects.all()
    return render_to_response('ratestreets/viewmodules.html', {'modules': modules}, context_instance=RequestContext(request))


@login_required
def editmodule(request, module_id):
    if (not request.user.is_superuser):
        return redirect('ratestreets.views.viewtasks')
    module = get_object_or_404(Study, pk=module_id)
    if (request.method =='POST'):
        form = ModuleForm(request, request.POST, instance=module)
        if (form.is_valid()):
            form.save()
            # todo -- should find associated studies and update task lists
            return redirect('ratestreets.views.viewadmintasks')
    else:
        form = ModuleForm(request, instance=module)
    return render_to_response('ratestreets/edit_form.html', {'form': form, 'item_type':'Module'}, context_instance=RequestContext(request))


@login_required
def pano(request, task_id):
    # not sure if we need to do anything yet.
    task = get_object_or_404(RatingTask, pk=task_id)
    return render_to_response('ratestreets/showpano.html', {'task': task}, context_instance=RequestContext(request))

@login_required
def ratestreet(request, task_id, rating_type=None):
    task = get_object_or_404(RatingTask, pk=task_id)
    if (request.method =='POST'):
        valid_form_response = False
        if (rating_type == 'boolean'):
            formset = BooleanRatingFormSet(request.POST)
            if (formset.is_valid()):
                valid_form_response = True
                formset.save()
                next_rating_type = task.get_next_rating_type('boolean')
        elif (rating_type == 'count'):
            formset = CountRatingFormSet(request.POST)
            if (formset.is_valid()):
                valid_form_response = True
                formset.save()
                next_rating_type = task.get_next_rating_type('count')
        elif (rating_type == 'category'):
            formset = CategoryRatingFormSet(request.POST)
            if (formset.is_valid()):
                valid_form_response = True
                formset.save()
                next_rating_type = task.get_next_rating_type('category')
        elif (rating_type == 'text'):
            formset = FreeFormRatingFormSet(request.POST)
            if (formset.is_valid()):
                valid_form_response = True
                formset.save()
                next_rating_type = task.get_next_rating_type('text')
        if (valid_form_response == False):
            # Failed validity check.  Redraw the same form
            return render_to_response('ratestreets/ratestreet.html', {'formset': formset, 'task': task}, context_instance=RequestContext(request))
        elif (next_rating_type == None):
            # Done with this task.  Go back to task menu for now --
            # will navigate to next location in the future.
            task.completed_at = datetime.now()
            task.save()
            # try to find the next task for the user.
            unfinished_tasks = RatingTask.objects.filter(user=request.user, completed_at=None)
            if (unfinished_tasks.count() == 0):
                # no unfinished tasks?  Return to the list
                return redirect('ratestreets.views.viewtasks')
            else:
                next_task = unfinished_tasks[0]
                next_rating_type = task.get_next_rating_type(None)
                return redirect('ratestreets.views.ratestreet', task_id=next_task.id, rating_type=next_rating_type)
                
        else:
            # Move along to the next rating type for this task
            return redirect('ratestreets.views.ratestreet', task_id=task_id, rating_type=next_rating_type)
            
    else:
        # Find the first formset we should show for this task and redirect to it.
        if (rating_type == None):
            return redirect('ratestreets.views.ratestreet', task_id=task_id, rating_type=task.get_next_rating_type(None))
        # Given the rating type, create the formset.
        if (rating_type == 'boolean'):
            ratings = task.find_or_create_ratings(BooleanRating)
            formset = BooleanRatingFormSet(queryset=ratings)
        elif (rating_type == 'count'):
            ratings = task.find_or_create_ratings(CountRating)
            formset = CountRatingFormSet(queryset=ratings)
        elif (rating_type == 'category'):
            ratings = task.find_or_create_ratings(CategoryRating)
            formset = CategoryRatingFormSet(queryset=ratings)
        elif (rating_type == 'text'):
            ratings = task.find_or_create_ratings(FreeFormRating)
            formset = FreeFormRatingFormSet(queryset=ratings)
    return render_to_response('ratestreets/ratestreet.html', {'formset': formset, 'task': task}, context_instance=RequestContext(request))


@login_required
def dotask(request, task_id):
    task = RatingTask.objects.get(id = task_id)
    return render_to_response('ratestreets/dotask.html', {'task': task}, context_instance=RequestContext(request))


@login_required
def export_data(request, study_id):
    if (not request.user.is_superuser):
        return redirect('ratestreets.views.viewtasks')
    study = get_object_or_404(Study, pk=study_id)
    boolean_ratings_queryset = BooleanRating.objects.filter(segment__study = study)
    count_ratings_queryset = CountRating.objects.filter(segment__study = study)
    category_ratings_queryset = CategoryRating.objects.filter(segment__study = study)
    free_form_ratings_queryset = FreeFormRating.objects.filter(segment__study = study)

    querysets = [boolean_ratings_queryset, count_ratings_queryset, category_ratings_queryset, free_form_ratings_queryset]

    # Find the list of columns for our study, including the impediment columns
    data_columns = []
    items = Item.objects.filter(module__study=study)
    for item in items.all():
        data_columns.append(item.name)
        data_columns.append(item.name + "_impediment")

    # Convert the data from tall to wide
    data_rows = {}
    for queryset in querysets:
        for rating in queryset.all():
            row_key = (rating.user.id, rating.segment.id)
            column_key = rating.item.name
            impediment_column_key = str(rating.item.name) + "_impediment" 
            if (row_key in data_rows):
                data_for_row = data_rows[row_key]
            else:
                data_for_row = {}
            data_for_row[column_key] = rating.rating
            data_rows[row_key] = data_for_row
            data_for_row[impediment_column_key] = rating.impediment

    # Create the HttpResponse object with the appropriate CSV header.
    response = HttpResponse(mimetype='text/csv')
    response['Content-Disposition'] = "attachment; filename=%s.csv" % study.description

    writer = csv.writer(response)
    # First, write the headers
    header_row = ['User', 'Segment']
    for column_name in data_columns:
        header_row.append(column_name)
    writer.writerow(header_row) 
    
    # Then write the data, leaving "" if no data present
    for row_key in data_rows.iterkeys():
        row_to_write = [row_key[0], row_key[1]]
        data_for_row = data_rows[row_key]
        for column_name in data_columns:
            if (column_name in data_for_row):
                value = data_for_row[column_name]
            else:
                value = ''
            row_to_write.append(value)
        writer.writerow(row_to_write)
    return response

@login_required
def showallsegments(request):
    segments = Segment.objects.all()
    return render_to_response('ratestreets/showallsegments.html', {'segments': segments}, context_instance=RequestContext(request))


@login_required
def submitrating(request, task_id):
    task = get_object_or_404(RatingTask, pk=task_id)
    ## Loop over submitted item responses.
    ratings = []
    for item in task.module.items.all():
        form_field_name = "item_" + str(item.id)
        try: 
            post_params = request.POST[form_field_name]
        except (KeyError): 
            return render_to_response('ratestreets/dotask.html', {'task': task, 'error_message': 'no item selected'}, context_instance=RequestContext(request))
        else:
            # todo -- obviously, this should be by item rating type.
            # todo -- use django form objects?
            rating = BooleanRating()
            rating.user = request.user
            rating.location = task.location
            rating.item = item
            rating.rating = request.POST[form_field_name]
            rating.save()
            ratings.append(rating)
    return render_to_response('ratestreets/submitrating.html', {'task': task, 'rating_count':len(ratings)}, context_instance=RequestContext(request))
